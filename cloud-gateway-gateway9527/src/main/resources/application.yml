server:
  port: 9527
spring:
  application:
    name: cloud-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true # 开启从注册中心动态创建路由的功能，利用微服务名称进行路由
      routes:
        - id: payment_route # 路由的id,没有规定规则但要求唯一,建议配合服务名
          #匹配后提供服务的路由地址,配置后可以不提供8001的服务访问地址，用9527的访问地址进行访问即可
#          uri: http://localhost:8001
          #利用服务名进行路由
          uri: lb://cloud-payment-service
          predicates:
            - Path=/payment/get/** # 断言，路径相匹配的进行路由
              # 在2020-04-12T12:13:47.485+08:00这个时间之后 /payment/get这个才有效，此处时间用ZonedDateTime去获取
              #- After=2020-04-12T12:13:47.485+08:00[Asia/Shanghai]
              # 在2020-04-12T16:13:47.485+08:00这个时间之前 /payment/get这个才有效
              #- Before=2020-04-12T16:13:47.485+08:00[Asia/Shanghai]
              # 访问过程中带不带cookie进行访问key=username value=zzyy，可以使用curl测试，postman等
              #- Cookie=username,zzyy
              # 访问过程中带不带header ，请求头要有X-Request-Id属性，并且值为正数（加号(\d+)）
              #- Header=X-Request-Id, \d+
              #- Host=**.vic.com
              #- Method=GET
              #- Query=username, \d+ # 要有参数名username并且值还要是正整数才能路由
            # 过滤
            #filters:
            # 过滤器工厂会在匹配的请求头加上一对请求头，名称为X-Request-Id值为1024
            #  - AddRequestHeader=X-Request-red, blue
        - id: payment_route2
#          uri: http://localhost:8001
          #利用服务名进行路由
          uri: lb://cloud-payment-service
          predicates:
            Path=/payment/lb/** #断言,路径相匹配的进行路由




eureka:
  client:
    # 表示是否将自己注册EurekaServer默认为true
    register-with-eureka: true
    # 是否从EurekaServer抓取已有的注册信息，默认为true，单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    fetch-registry: true
    service-url:
      # 集群注册到 eureka则需要用逗号隔开不同的服务地址即可
      defaultZone: http://eureka7001.com:7001/eureka
    # eureka是否启用，false 为不启用
    enabled: true
  instance:
    hostname: cloud-gateway-service
